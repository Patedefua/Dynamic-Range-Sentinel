name: Construir y Publicar Plugin

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - name: 1. Clonar Repositorio Principal
      uses: actions/checkout@v4
      with:
        path: main

    # ⚡ PROTOCOLO DE FUERZA BRUTA: Usamos git clone directamente para evitar fallos de la acción checkout.
    - name: 2. Clonar VST2 SDK (Método Directo)
      run: git clone https://github.com/FigBug/VST2-SDK.git vst2sdk

    - name: 3. Instalar Dependencias (Linux)
      working-directory: main
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config gobjc++ libasound2-dev libjack-jackd2-dev libx11-dev libxinerama-dev libxrandr-dev libxcursor-dev libgl-dev libfreetype6-dev

    - name: 4. Configurar CMake
      working-directory: main
      shell: bash
      run: |
        SDK_PATH="../vst2sdk"
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          cmake . -B Builds -D VST2_SDK_PATH=$SDK_PATH -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
        else
          cmake . -B Builds -D VST2_SDK_PATH=$SDK_PATH
        fi

    - name: 5. Construir el Plugin con CMake
      working-directory: main
      run: cmake --build Builds --config Release

    - name: 6. Preparar Paquete de Compatibilidad Total
      working-directory: main
      id: package
      shell: bash
      run: |
        PLUGIN_NAME="DynamicRangeSentinel"
        PACKAGE_DIR="dist"
        mkdir -p $PACKAGE_DIR

        # Encuentra y mueve VST3
        VST3_PATH=$(find Builds -name "${PLUGIN_NAME}.vst3" -print -quit)
        if [ -n "$VST3_PATH" ]; then
          mv "$VST3_PATH" "$PACKAGE_DIR/"
        fi
        
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          # Encuentra y mueve VST2 (.dll)
          VST2_PATH=$(find Builds -path "*Release/${PLUGIN_NAME}.dll" -print -quit)
          if [ -n "$VST2_PATH" ]; then
            mv "$VST2_PATH" "$PACKAGE_DIR/"
          fi
          ZIP_NAME="${PLUGIN_NAME}-VST-Bundle-Win.zip"
        elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          # Encuentra y mueve VST2 (.so)
          VST2_PATH=$(find Builds -path "*${PLUGIN_NAME}.so" -print -quit)
          if [ -n "$VST2_PATH" ]; then
            mv "$VST2_PATH" "$PACKAGE_DIR/"
          fi
          ZIP_NAME="${PLUGIN_NAME}-VST-Bundle-Linux.zip"
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          # Encuentra y mueve VST2 (.vst)
          VST2_PATH=$(find Builds -name "${PLUGIN_NAME}.vst" -type d -print -quit)
          if [ -n "$VST2_PATH" ]; then
            mv "$VST2_PATH" "$PACKAGE_DIR/"
          fi
          ZIP_NAME="${PLUGIN_NAME}-VST-Bundle-Mac-Universal.zip"
        fi
        
        cd $PACKAGE_DIR && zip -r ../$ZIP_NAME . && cd ..
        echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

    - name: 7. Subir el Artefacto Comprimido
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.zip_name }}
        path: main/${{ steps.package.outputs.zip_name }}
