name: Build JUCE Project

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      # Paso 1: Descargar el c칩digo fuente de nuestro proyecto.
      - name: Checkout project code
        uses: actions/checkout@v4

      # Paso 2: Instalar dependencias de Linux.
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libjack-jackd2-dev libfreetype6-dev libx11-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libwebkitgtk-6.0-dev

      # Paso 3: Compilaci칩n
      - name: Build
        id: build
        # Forzar el uso de Bash en todos los sistemas para unificar la ejecuci칩n.
        shell: bash 
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            # En macOS, apuntamos a la ruta exacta que me has mostrado en la captura.
            cmake -B Builds -DJUCE_VST2_SDK_PATH=./vst2sdk/public.sdk/source/vst2.x
          else
            # Comando est치ndar para Windows y Linux.
            cmake -B Builds
          fi
          cmake --build Builds --config Release

      # Paso 4: Carga de los artefactos (instaladores)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: DynamicRangeSentinel-${{ runner.os }}
          path: Builds/DynamicRangeSentinel_artefacts/Release/
