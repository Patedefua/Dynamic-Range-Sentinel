name: Construir y Publicar Plugin

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - name: 1. Clonar Repositorio
      uses: actions/checkout@v4

    - name: 2. Instalar Dependencias (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        # ⚡ SIMPLIFICACIÓN: Eliminadas las dependencias gráficas (GTK/WebKit), ya no son necesarias.
        sudo apt-get install -y build-essential pkg-config libasound2-dev libjack-jackd2-dev

    - name: 3. Configurar CMake
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          cmake . -B Builds -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
        elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          # ⚡ COMPILACIÓN ACÉFALA: Construimos sin GUI en Linux para eludir dependencias gráficas.
          cmake . -B Builds -D JUCE_HEADLESS_PLUGIN_CLIENT=1
        else
          cmake . -B Builds
        fi

    - name: 4. Construir el Plugin con CMake
      run: cmake --build Builds --config Release

    - name: 5. Preparar Paquete Antifrágil
      id: package
      shell: bash
      run: |
        PLUGIN_NAME="DynamicRangeSentinel"
        PACKAGE_DIR="dist"
        mkdir -p $PACKAGE_DIR

        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          PLUGIN_PATH=$(find Builds -name "${PLUGIN_NAME}.vst3" -print -quit)
          mv "$PLUGIN_PATH" "$PACKAGE_DIR/"
          ZIP_NAME="${PLUGIN_NAME}-VST3-Win.zip"
        elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          PLUGIN_PATH=$(find Builds -name "${PLUGIN_NAME}.vst3" -print -quit)
          mv "$PLUGIN_PATH" "$PACKAGE_DIR/"
          ZIP_NAME="${PLUGIN_NAME}-VST3-Linux-Headless.zip"
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          PLUGIN_PATH=$(find Builds -name "${PLUGIN_NAME}.component" -type d -print -quit)
          mv "$PLUGIN_PATH" "$PACKAGE_DIR/"
          ZIP_NAME="${PLUGIN_NAME}-AU-Mac-Universal.zip"
        fi
        
        cd $PACKAGE_DIR && zip -r ../$ZIP_NAME . && cd ..
        echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

    - name: 6. Subir el Artefacto Comprimido
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.zip_name }}
        path: ${{ steps.package.outputs.zip_name }}
